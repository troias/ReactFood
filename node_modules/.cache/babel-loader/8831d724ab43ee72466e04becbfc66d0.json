{"ast":null,"code":"var _jsxFileName = \"/home/troias/udemy/project-2/01-starting-project/src/components/UI/Forms/OrderForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useContext } from \"react\";\nimport useInput from \"../../../customHooks/useInput\";\nimport OrderContext from \"../../../contextStore/OrderProvider\";\nimport { emailValidator, nameInputValidator, postalCodeInputValidator, cityInputValidator } from \"../../../UtilityFunctions/inputValidationFunctions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst OrderForm = props => {\n  _s();\n\n  const orderCTX = useContext(OrderContext);\n  const {\n    value: enteredNameValue,\n    hasError: nameInputError,\n    valueChangedHandler: nameChangeHandler,\n    inputBlurHandler: nameInputBlurHandler,\n    isValid: valueIsValid // reset: resetInput\n\n  } = useInput(nameInputValidator);\n  const {\n    value: enteredEmailValue,\n    hasError: emailInputError,\n    valueChangedHandler: emailChangeHandler,\n    inputBlurHandler: emailInputBlurHandler,\n    isValid: emailIsValid // reset: resetEmail\n\n  } = useInput(emailValidator);\n  const {\n    value: enteredPostalCodeValue,\n    hasError: enteredPostalCodeInputError,\n    valueChangedHandler: enteredPostalCodeChangeHandler,\n    inputBlurHandler: enteredPostalCodeInputBlurHandler,\n    isValid: enteredPostalCodeIsValid // reset: enteredPostalCodeEmail\n\n  } = useInput(postalCodeInputValidator);\n  const {\n    value: enteredCityValue,\n    hasError: enteredCityInputError,\n    valueChangedHandler: enteredCityChangeHandler,\n    inputBlurHandler: enteredCityInputBlurHandler,\n    isValid: enteredCityIsValid // reset: enteredCityEmail\n\n  } = useInput(cityInputValidator);\n  useEffect(() => {\n    if (valueIsValid && emailIsValid && enteredCityIsValid && enteredPostalCodeIsValid) {\n      props.valid(true);\n    }\n  }, [valueIsValid, emailIsValid, enteredCityIsValid, enteredPostalCodeIsValid, props]);\n\n  const sendOrderHandler = () => {\n    const orderInfo = {\n      name: enteredNameValue,\n      email: enteredEmailValue,\n      city: enteredCityValue,\n      postalCode: enteredPostalCodeValue\n    };\n    props.orderHandler(orderInfo);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      value: \"Name\",\n      children: \" Name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"Name\",\n      type: \"text\",\n      id: \"name\",\n      value: enteredNameValue,\n      onChange: nameChangeHandler,\n      onBlur: nameInputBlurHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      value: \"Name\",\n      children: \"Email\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"Email\",\n      type: \"email\",\n      id: \"email\",\n      value: enteredEmailValue,\n      onChange: emailChangeHandler,\n      onBlur: emailInputBlurHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      value: \"Name\",\n      children: \"Postal Code\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"Postal Code\",\n      type: \"text\",\n      id: \"Postal Code\",\n      value: enteredPostalCodeValue,\n      onChange: enteredPostalCodeChangeHandler,\n      onBlur: enteredPostalCodeInputBlurHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      value: \"Name\",\n      children: \"City\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"City\",\n      type: \"text\",\n      id: \"City\",\n      value: enteredCityValue,\n      enteredCityChangeHandler: true,\n      onChange: enteredCityChangeHandler,\n      onBlur: enteredCityInputBlurHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendOrderHandler,\n      children: \"Confirm \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this), nameInputError && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-text\",\n      children: \" Cannot be empty \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 32\n    }, this), emailInputError && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-text\",\n      children: \" Does not include \\\"@\\\" \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 17\n    }, this), enteredPostalCodeInputError && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-text\",\n      children: \" Has to be a number over 1 and under 6 \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 17\n    }, this), enteredCityInputError && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-text\",\n      children: \" Can't be empty \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n};\n\n_s(OrderForm, \"/U9Q1vpZrYPVk08SeGz/iJr3sHA=\", false, function () {\n  return [useInput, useInput, useInput, useInput];\n});\n\n_c = OrderForm;\nexport default OrderForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"OrderForm\");","map":{"version":3,"sources":["/home/troias/udemy/project-2/01-starting-project/src/components/UI/Forms/OrderForm.js"],"names":["React","useEffect","useContext","useInput","OrderContext","emailValidator","nameInputValidator","postalCodeInputValidator","cityInputValidator","OrderForm","props","orderCTX","value","enteredNameValue","hasError","nameInputError","valueChangedHandler","nameChangeHandler","inputBlurHandler","nameInputBlurHandler","isValid","valueIsValid","enteredEmailValue","emailInputError","emailChangeHandler","emailInputBlurHandler","emailIsValid","enteredPostalCodeValue","enteredPostalCodeInputError","enteredPostalCodeChangeHandler","enteredPostalCodeInputBlurHandler","enteredPostalCodeIsValid","enteredCityValue","enteredCityInputError","enteredCityChangeHandler","enteredCityInputBlurHandler","enteredCityIsValid","valid","sendOrderHandler","orderInfo","name","email","city","postalCode","orderHandler"],"mappings":"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","sourcesContent":["import React, { useEffect, useContext } from \"react\";\r\nimport useInput from \"../../../customHooks/useInput\";\r\nimport OrderContext from \"../../../contextStore/OrderProvider\"\r\nimport {\r\n    emailValidator,\r\n    nameInputValidator,\r\n    postalCodeInputValidator,\r\n    cityInputValidator,\r\n} from \"../../../UtilityFunctions/inputValidationFunctions\";\r\n\r\n\r\n\r\nconst OrderForm = (props) => {\r\n\r\n    const orderCTX = useContext(OrderContext)\r\n  \r\n    const {\r\n        value: enteredNameValue,\r\n        hasError: nameInputError,\r\n        valueChangedHandler: nameChangeHandler,\r\n        inputBlurHandler: nameInputBlurHandler,\r\n        isValid: valueIsValid,\r\n        // reset: resetInput\r\n    } = useInput(nameInputValidator);\r\n\r\n    const {\r\n        value: enteredEmailValue,\r\n        hasError: emailInputError,\r\n        valueChangedHandler: emailChangeHandler,\r\n        inputBlurHandler: emailInputBlurHandler,\r\n        isValid: emailIsValid,\r\n        // reset: resetEmail\r\n    } = useInput(emailValidator);\r\n\r\n    const {\r\n        value: enteredPostalCodeValue,\r\n        hasError: enteredPostalCodeInputError,\r\n        valueChangedHandler: enteredPostalCodeChangeHandler,\r\n        inputBlurHandler: enteredPostalCodeInputBlurHandler,\r\n        isValid: enteredPostalCodeIsValid,\r\n        // reset: enteredPostalCodeEmail\r\n    } = useInput(postalCodeInputValidator);\r\n\r\n    const {\r\n        value: enteredCityValue,\r\n        hasError: enteredCityInputError,\r\n        valueChangedHandler: enteredCityChangeHandler,\r\n        inputBlurHandler: enteredCityInputBlurHandler,\r\n        isValid: enteredCityIsValid,\r\n        // reset: enteredCityEmail\r\n    } = useInput(cityInputValidator);\r\n\r\n    useEffect(() => {\r\n        if (\r\n            valueIsValid &&\r\n            emailIsValid &&\r\n            enteredCityIsValid &&\r\n            enteredPostalCodeIsValid\r\n        ) {\r\n            props.valid(true)\r\n     \r\n        }\r\n\r\n    }, [valueIsValid, emailIsValid, enteredCityIsValid, enteredPostalCodeIsValid, props])\r\n\r\n    const sendOrderHandler = () => {\r\n        const orderInfo = {\r\n            name: enteredNameValue, \r\n            email: enteredEmailValue , \r\n            city: enteredCityValue, \r\n            postalCode: enteredPostalCodeValue, \r\n        }\r\n\r\n        props.orderHandler(orderInfo)\r\n    }\r\n\r\n    return (\r\n        <form>\r\n            <label value=\"Name\"> Name</label>\r\n            <br />\r\n            <input\r\n                placeholder=\"Name\"\r\n                type=\"text\"\r\n                id=\"name\"\r\n                value={enteredNameValue}\r\n                onChange={nameChangeHandler}\r\n                onBlur={nameInputBlurHandler}\r\n            />\r\n\r\n            <br />\r\n            <label value=\"Name\">Email</label>\r\n            <br />\r\n            <input\r\n                placeholder=\"Email\"\r\n                type=\"email\"\r\n                id=\"email\"\r\n                value={enteredEmailValue}\r\n                onChange={emailChangeHandler}\r\n                onBlur={emailInputBlurHandler}\r\n            />\r\n            <br />\r\n            <label value=\"Name\">Postal Code</label>\r\n            <br />\r\n            <input\r\n                placeholder=\"Postal Code\"\r\n                type=\"text\"\r\n                id=\"Postal Code\"\r\n                value={enteredPostalCodeValue}\r\n                onChange={enteredPostalCodeChangeHandler}\r\n                onBlur={enteredPostalCodeInputBlurHandler}\r\n            />\r\n            <br />\r\n            <label value=\"Name\">City</label>\r\n            <br />\r\n            <input\r\n                placeholder=\"City\"\r\n                type=\"text\"\r\n                id=\"City\"\r\n                value={enteredCityValue}\r\n                enteredCityChangeHandler\r\n                onChange={enteredCityChangeHandler}\r\n                onBlur={enteredCityInputBlurHandler}\r\n            />\r\n            <button onClick={sendOrderHandler}>Confirm </button>\r\n\r\n            {nameInputError && <p className={\"error-text\"}> Cannot be empty </p>}\r\n            {emailInputError && (\r\n                <p className={\"error-text\"}> Does not include \"@\" </p>\r\n            )}\r\n            {enteredPostalCodeInputError && (\r\n                <p className={\"error-text\"}> Has to be a number over 1 and under 6 </p>\r\n            )}\r\n            {enteredCityInputError && (\r\n                <p className={\"error-text\"}> Can't be empty </p>\r\n            )}\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default OrderForm;\r\n"]},"metadata":{},"sourceType":"module"}